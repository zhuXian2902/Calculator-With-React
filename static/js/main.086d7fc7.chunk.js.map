{"version":3,"sources":["Button.js","Buttons.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","onClick","e","addExp","btnValue","className","Buttons","pre","operator","operation","num1","num2","compute","str","ans","numArray","operators","i","length","push","temp","pop","total","n2","num","setState","prev","exp","state","slice","expression","replace","isNaN","this","map","key","React","Component","Calculator","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.086d7fc7.chunk.js","sourcesContent":["/** @format */\r\n\r\nimport React from 'react';\r\n\r\nconst Button = (props) => {\r\n\treturn (\r\n\t\t<button onClick={(e) => props.addExp(e, props.btnValue)} className=\"btn\">\r\n\t\t\t{props.btnValue}\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nexport default Button;\r\n","/** @format */\r\n\r\nimport React from 'react';\r\nimport Button from './Button';\r\n\r\nexport default class Buttons extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tans: 0,\r\n\t\t\texp: '',\r\n\t\t};\r\n\t}\r\n\r\n\t/** somw good test cases failing on eval\r\n\t * a. (1-2\r\n\t * b. (1--2)\r\n\t * c. (1-(-2))\r\n\t */\r\n\r\n\tpre = (operator) => {\r\n\t\tif (operator === '*' || operator === '/' || operator === '%') return 2;\r\n\t\telse if (operator === '+' || operator === '-') return 1;\r\n\t\treturn 0;\r\n\t};\r\n\r\n\toperation = (num1, num2, operator) => {\r\n\t\tif (operator === '+') return num1 + num2;\r\n\t\telse if (operator === '-') return num1 - num2;\r\n\t\telse if (operator === '*') return num1 * num2;\r\n\t\telse if (operator === '/') return num1 / num2;\r\n\t\telse if (operator === '%') return num1 % num2;\r\n\t};\r\n\r\n\tcompute = (str, ans) => {\r\n\t\tlet numArray = [ans];\r\n\t\tlet operators = [];\r\n\t\t// console.log(numArray);\r\n\t\tfor (let i = 0; i < str.length; i++) {\r\n\t\t\tif (str[i] === '(') {\r\n\t\t\t\toperators.push(str[i]);\r\n\t\t\t} else if (str[i] >= 0 && str[i] <= 9) {\r\n\t\t\t\tlet temp = 0;\r\n\t\t\t\twhile (i < str.length && str[i] >= 0 && str[i] <= 9) {\r\n\t\t\t\t\ttemp = temp * 10 + (str[i] - '0');\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\t\t\t\ti--;\r\n\t\t\t\tnumArray.push(temp);\r\n\t\t\t} else if (str[i] === ')') {\r\n\t\t\t\twhile (operators.length > 0 && operators[operators.length - 1] !== '(') {\r\n\t\t\t\t\tlet num2 = numArray.pop();\r\n\t\t\t\t\tlet num1 = numArray.pop();\r\n\t\t\t\t\tlet operator = operators.pop();\r\n\t\t\t\t\tlet total = this.operation(num1, num2, operator);\r\n\t\t\t\t\tnumArray.push(total);\r\n\t\t\t\t}\r\n\t\t\t\tif (operators.length === 0) return 'Error';\r\n\t\t\t\telse operators.pop();\r\n\t\t\t} else {\r\n\t\t\t\twhile (\r\n\t\t\t\t\toperators.length > 0 &&\r\n\t\t\t\t\tthis.pre(operators[operators.length - 1]) >= this.pre(str[i])\r\n\t\t\t\t) {\r\n\t\t\t\t\tlet num2 = numArray.pop();\r\n\t\t\t\t\tlet num1 = numArray.pop();\r\n\t\t\t\t\tlet operator = operators.pop();\r\n\t\t\t\t\tnumArray.push(this.operation(num1, num2, operator));\r\n\t\t\t\t}\r\n\t\t\t\toperators.push(str[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\twhile (operators.length > 0) {\r\n\t\t\tlet num2 = numArray.pop();\r\n\t\t\tlet num1 = numArray.pop();\r\n\r\n\t\t\tif (operators[operators.length - 1] === '(') operators.pop();\r\n\t\t\tif (operators.length === 0) {\r\n\t\t\t\tif (num1 === 0) return num2;\r\n\t\t\t\telse return 'Error';\r\n\t\t\t}\r\n\t\t\tlet operator = operators.pop();\r\n\t\t\tnumArray.push(this.operation(num1, num2, operator));\r\n\t\t}\r\n\r\n\t\tlet n2 = numArray.pop();\r\n\t\tif (numArray.length === 0) return n2;\r\n\t\tlet n1 = numArray.pop();\r\n\t\t// console.log(n1, n2);\r\n\t\tif (n1 !== 0) return 'Error';\r\n\t\treturn n2;\r\n\t};\r\n\r\n\taddExp = (e, num) => {\r\n\t\tif (num !== '=' && num !== 'C' && num !== 'CE') {\r\n\t\t\tthis.setState((prev) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\texp: prev.exp + num,\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t} else if (num === 'C') {\r\n\t\t\tthis.setState((prev) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\texp: '',\r\n\t\t\t\t\tans: 0,\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t} else if (num === 'CE') {\r\n\t\t\t// let { exp } = this.state;\r\n\t\t\tthis.setState((prev) => {\r\n\t\t\t\treturn { exp: this.state.exp.slice(0, -1) };\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tlet expression = this.state.exp;\r\n\t\t\t// console.log(expression);\r\n\t\t\tlet { ans } = this.state;\r\n\t\t\texpression = expression.replace('--', '+');\r\n\t\t\texpression = expression.replace('-(-', '+(');\r\n\t\t\texpression = expression.replace('-+', '-');\r\n\t\t\texpression = expression.replace('+-', '-');\r\n\t\t\texpression = expression.replace('-(+', '-(');\r\n\t\t\texpression = expression.replace('+(-', '-(');\r\n\t\t\t// console.log(expression);\r\n\t\t\tlet total = this.compute(expression, ans);\r\n\t\t\tif (isNaN(total) || typeof total === 'undefined')\r\n\t\t\t\tthis.setState(() => {\r\n\t\t\t\t\treturn { ans: 'Error', exp: '' };\r\n\t\t\t\t});\r\n\t\t\t// console.log(total);\r\n\t\t\telse {\r\n\t\t\t\tthis.setState((prev) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tans: total,\r\n\t\t\t\t\t\texp: '',\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"body\">\r\n\t\t\t\t<div className=\"screen\">\r\n\t\t\t\t\t{<h1>{this.state.ans}</h1>} {<h2>{this.state.exp}</h2>}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"btns\">\r\n\t\t\t\t\t{this.props.numArray.map((num) => (\r\n\t\t\t\t\t\t// <button onClick={(e) => this.addExp(e, num)} className=\"btn\" key={num}>\r\n\t\t\t\t\t\t// \t{num}\r\n\t\t\t\t\t\t// </button>\r\n\t\t\t\t\t\t<Button addExp={this.addExp} key={num} btnValue={num} />\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","/** @format */\n\nimport React from 'react';\nimport './App.css';\nimport Buttons from './Buttons';\n\nclass Calculator extends React.Component {\n\trender() {\n\t\tlet nums = [\n\t\t\t'C',\n\t\t\t'/',\n\t\t\t'*',\n\t\t\t'CE',\n\t\t\t1,\n\t\t\t2,\n\t\t\t3,\n\t\t\t'-',\n\t\t\t4,\n\t\t\t5,\n\t\t\t6,\n\t\t\t'+',\n\t\t\t7,\n\t\t\t8,\n\t\t\t9,\n\t\t\t'=',\n\t\t\t0,\n\t\t\t'(',\n\t\t\t')',\n\t\t\t'%',\n\t\t];\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Buttons numArray={nums} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Calculator;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}